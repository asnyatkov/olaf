# Copyright (C) 2013-2014 OL2, Inc.  See LICENSE.txt for details.

require "dm-core"
require "dm-migrations"
require "dm-serializer/to_json"
require "dm-timestamps"
require "dm-types"
require "dm-validations"
require "olaf/extensions/uuid"

module Olaf

  PersistentResource = DataMapper::Resource

  # Standard properties for a persistent resource. Adds autogenerated UUID id,
  # createdAt and updatedAt.
  #
  #Example usage:
  #
  # class MyRecord
  #   include Olaf::PersistentResource
  #   include Olaf::StandardProperties
  # end
  #
  module StandardProperties
    def self.included(other)
      other.class_eval do
        property :id, DataMapper::Property::UUID, :key => true, :required => true,
                                                  :default => Proc.new { UUIDTools::UUID.random_create.to_s }
        timestamps :at

        before :create do
          # force a new ID; we don't want to allow someone to manually set something
          # TODO: I tried to take out the :default key above, but it leads to rejected
          # values when you try to create a new object without passing an ID? So I'm going to leave it.
          @id = UUIDTools::UUID.random_create.to_s
        end

        def attribute_actually_dirty(attrib)
          return attribute_dirty?(attrib) &&
              original_attributes[properties[attrib]] != dirty_attributes[properties[attrib]]
        end

        before :update do
          # TODO: add exact arguments here...
          if attribute_actually_dirty(:id) || attribute_actually_dirty(:created_at)
            # TODO: how to enforce people not manually updating updated_at?
            raise ArgumentError, "Failing update of id or created_at field; cannot be changed in an update."
          end
        end
      end
    end
  end
end

require "uri"
require "active_record"

# ActiveRecord additions:
module Olaf
  module Type
    COMMA_SEPARATED = /\A\w+((?:,\w+)*)\Z/
    URI = ::URI.regexp
  end

  # Class "Required" is used to mark parameters as required.
  # Specifically, the param type Required[String] denotes a String
  # field that must be present.
  #
  # This is accomplished by trickery -- creating an object of class
  # "Required" which remembers the class in square brackets.
  #
  class Required
    attr_reader :klass

    def self.[](klass)
      unless klass.is_a? Class
        raise "Only a type can be an Required param type!"
      end

      self.new(klass)
    end

    def initialize(klass)
      @klass = klass
    end
  end
end


#Defining a new validator:
#http://guides.rubyonrails.org/active_record_validations_callbacks.html#custom-methods

ActiveRecord::Base.class_eval do
  def self.validates_as_json(attr_name, options = {})
    validates_each attr_name do |record, attr, value|
      unless JSON.load(value)
        record.errors[attr] << options[:message] || "is not valid JSON"
      end
    end
  end
end
